{
	"Try-Catch Generator": {
		"prefix": ["gentrycatch"],
		"body": [
			"function* ${1:fnName}(){",
			"\ttry{",
			"\t",
			"\t} catch(ex: any){",
			"\t",
			"\t} finally {",
			"\t",
			"\t}",
			"}"
		]
	},
	"New Redux Saga": {
		"prefix": ["redux-saga", "rsaga", "saga"],
		"body": [
			"import {put, call, takeEvery} from \"@redux-saga/core/effects\"",
			"",
			"import { AxiosError } from \"axios\"",
			"",
			"function* ${5:fetchFunction}(){",
			"\tyield call(${6:ApiFunction})",
			"}",
			"",
			"function handleAxiosError(error: AxiosError){",
			"\t",
			"}",
			"",
			"function* tryTo${3:asyncFunction}(){",
			"\tconst {start, end, fail} = ${4:action}",
			"\tyield put(start())",
			"\ttry{",
			"\t\tyield call(${5:fetchFunfction})",
			"\t} catch(ex: any){",
			"\t\tconst errorMessage = handleAxiosError(ex)",
			"\t\tyield put(fail(errorMessage))",
			"\t} finally {",
			"\t\tyield put(end())",
			"\t}",
			"}",
			"",
			"function* ${1:sagaName}Saga(){",
			"\tyield takeEvery(${2:reducerAction}, tryTo${3:asyncFunction})",
			"}",
			"export default ${1:sagaName}Saga"
		]
	},
	"New Redux Slice": {
		"prefix": ["redux-slice", "rslice", "slice"],
		"body": [
			"import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";",
			"",
			"type State = {",
			"\t${3:stateColumn}: ${4:stateColumnType}",
			"}",
			"",
			"const initialState: State = {",
			"\t${3:stateColumn}: ${5:stateColumnIninitalState}",
			"}",
			"",
			"const ${1:sliceName} = createSlice({",
			"\tname: \"${2:reducerName}\",",
			"\tinitialState,",
			"\treducers: {",
			"",
			"\t},",
			"})",
			"export default ${1:sliceName}"
		]
	},
	"New Api Redux actions": {
		"prefix": ["redux-api-actions", "rapiactions", "raactions"],
		"body": [
			"\t\t${1:actionName}Start: (state: State)=>{",
			"\t\t\tstate.${2:stateColumn}.loading = true",
			"\t\t},",
			"\t\t${1:actionName}End: (state: State)=>{",
			"\t\t\tstate.${2:stateColumn}.loading = true",
			"\t\t},",
			"\t\t${1:actionName}Success: (state: State${3:successPayload})=>{",
			"\t\t\t",
			"\t\t},",
			"\t\t${1:actionName}Fail: (state: State, {payload}: PayloadAction<${4:errorType}>)=>{",
			"\t\t\tstate.${2:stateColumn}.error = payload",
			"\t\t}",
		]
	},
	"New Redux Selector": {
		"prefix": ["redux-selector", "rselector", "selector"],
		"body": [
			"const ${1:selectorName} = ({${2:reducerKey}}: RootState)=>${2:reducerKey}",
			"export default ${1:selectorName}"
		]
	},
	"New Redux actions": {
		"prefix": ["redux-actions", "ractions", "actions"],
		"body":[
			"export const actions = ${1:sliceName}.actions",
			"export const ${2:ActionName} = {",
			"\tstart: actions.${3:reducerActionName}Start,",
			"\tend: actions.${3:reducerActionName}End,",
			"\tsucceed: actions.${3:reducerActionName}Succeed,",
			"\tfail: actions.${3:reducerActionName}Fail,",
			"\tasync: createAction<${4:asyncPayloadType}>(\"${5:asyncActionName}\")",
			"}",
		] 
	},
	"New Redux api": {
		"prefix": ["redux-api", "rapi"],
		"body": [
			"const ${1:api} = ()=>${2:ApiRequest}({",
			"\turl: ${3:url},",
			"\tmethod: ${4:GET},",
			"\t${5:config},",
			"})"
		]
	}
}